// Generated by jextract

package pl.lemanski.mikroaudio.internal;

import com.v7878.foreign.*;

import java.lang.invoke.*;
import java.util.*;
import java.util.stream.*;
import static com.v7878.foreign.ValueLayout.JAVA_BYTE;

public class miniaudio_h {

    miniaudio_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class ma_device_config_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ma_device_config.layout(),
            miniaudio_h.C_INT
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_config_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ma_device_config ma_device_config_init(ma_device_type deviceType)
     * }
     */
    public static FunctionDescriptor ma_device_config_init$descriptor() {
        return ma_device_config_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ma_device_config ma_device_config_init(ma_device_type deviceType)
     * }
     */
    public static MethodHandle ma_device_config_init$handle() {
        return ma_device_config_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ma_device_config ma_device_config_init(ma_device_type deviceType)
     * }
     */
    public static MemorySegment ma_device_config_init$address() {
        return ma_device_config_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ma_device_config ma_device_config_init(ma_device_type deviceType)
     * }
     */
    public static MemorySegment ma_device_config_init(SegmentAllocator allocator, int deviceType) {
        var mh$ = ma_device_config_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_config_init", allocator, deviceType);
            }
            return (MemorySegment)mh$.invokeExact(allocator, deviceType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_device_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            miniaudio_h.C_INT,
            miniaudio_h.C_POINTER,
            miniaudio_h.C_POINTER,
            miniaudio_h.C_POINTER
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ma_result ma_device_init(ma_context *pContext, const ma_device_config *pConfig, ma_device *pDevice)
     * }
     */
    public static FunctionDescriptor ma_device_init$descriptor() {
        return ma_device_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ma_result ma_device_init(ma_context *pContext, const ma_device_config *pConfig, ma_device *pDevice)
     * }
     */
    public static MethodHandle ma_device_init$handle() {
        return ma_device_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ma_result ma_device_init(ma_context *pContext, const ma_device_config *pConfig, ma_device *pDevice)
     * }
     */
    public static MemorySegment ma_device_init$address() {
        return ma_device_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ma_result ma_device_init(ma_context *pContext, const ma_device_config *pConfig, ma_device *pDevice)
     * }
     */
    public static int ma_device_init(MemorySegment pContext, MemorySegment pConfig, MemorySegment pDevice) {
        var mh$ = ma_device_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_init", pContext, pConfig, pDevice);
            }
            return (int)mh$.invokeExact(pContext, pConfig, pDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_device_uninit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            miniaudio_h.C_POINTER
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_uninit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ma_device_uninit(ma_device *pDevice)
     * }
     */
    public static FunctionDescriptor ma_device_uninit$descriptor() {
        return ma_device_uninit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ma_device_uninit(ma_device *pDevice)
     * }
     */
    public static MethodHandle ma_device_uninit$handle() {
        return ma_device_uninit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ma_device_uninit(ma_device *pDevice)
     * }
     */
    public static MemorySegment ma_device_uninit$address() {
        return ma_device_uninit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ma_device_uninit(ma_device *pDevice)
     * }
     */
    public static void ma_device_uninit(MemorySegment pDevice) {
        var mh$ = ma_device_uninit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_uninit", pDevice);
            }
            mh$.invokeExact(pDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_device_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            miniaudio_h.C_INT,
            miniaudio_h.C_POINTER,
            miniaudio_h.C_INT,
            miniaudio_h.C_POINTER
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_get_info");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ma_result ma_device_get_info(ma_device *pDevice, ma_device_type type, ma_device_info *pDeviceInfo)
     * }
     */
    public static FunctionDescriptor ma_device_get_info$descriptor() {
        return ma_device_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ma_result ma_device_get_info(ma_device *pDevice, ma_device_type type, ma_device_info *pDeviceInfo)
     * }
     */
    public static MethodHandle ma_device_get_info$handle() {
        return ma_device_get_info.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ma_result ma_device_get_info(ma_device *pDevice, ma_device_type type, ma_device_info *pDeviceInfo)
     * }
     */
    public static MemorySegment ma_device_get_info$address() {
        return ma_device_get_info.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ma_result ma_device_get_info(ma_device *pDevice, ma_device_type type, ma_device_info *pDeviceInfo)
     * }
     */
    public static int ma_device_get_info(MemorySegment pDevice, int type, MemorySegment pDeviceInfo) {
        var mh$ = ma_device_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_get_info", pDevice, type, pDeviceInfo);
            }
            return (int)mh$.invokeExact(pDevice, type, pDeviceInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_device_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            miniaudio_h.C_INT,
            miniaudio_h.C_POINTER
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ma_result ma_device_start(ma_device *pDevice)
     * }
     */
    public static FunctionDescriptor ma_device_start$descriptor() {
        return ma_device_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ma_result ma_device_start(ma_device *pDevice)
     * }
     */
    public static MethodHandle ma_device_start$handle() {
        return ma_device_start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ma_result ma_device_start(ma_device *pDevice)
     * }
     */
    public static MemorySegment ma_device_start$address() {
        return ma_device_start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ma_result ma_device_start(ma_device *pDevice)
     * }
     */
    public static int ma_device_start(MemorySegment pDevice) {
        var mh$ = ma_device_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_start", pDevice);
            }
            return (int)mh$.invokeExact(pDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_device_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            miniaudio_h.C_INT,
            miniaudio_h.C_POINTER
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_device_stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ma_result ma_device_stop(ma_device *pDevice)
     * }
     */
    public static FunctionDescriptor ma_device_stop$descriptor() {
        return ma_device_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ma_result ma_device_stop(ma_device *pDevice)
     * }
     */
    public static MethodHandle ma_device_stop$handle() {
        return ma_device_stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ma_result ma_device_stop(ma_device *pDevice)
     * }
     */
    public static MemorySegment ma_device_stop$address() {
        return ma_device_stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ma_result ma_device_stop(ma_device *pDevice)
     * }
     */
    public static int ma_device_stop(MemorySegment pDevice) {
        var mh$ = ma_device_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_device_stop", pDevice);
            }
            return (int)mh$.invokeExact(pDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ma_copy_pcm_frames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            miniaudio_h.C_POINTER,
            miniaudio_h.C_POINTER,
            miniaudio_h.C_LONG_LONG,
            miniaudio_h.C_INT,
            miniaudio_h.C_INT
        );

        public static final MemorySegment ADDR = miniaudio_h.findOrThrow("ma_copy_pcm_frames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ma_copy_pcm_frames(void *dst, const void *src, ma_uint64 frameCount, ma_format format, ma_uint32 channels)
     * }
     */
    public static FunctionDescriptor ma_copy_pcm_frames$descriptor() {
        return ma_copy_pcm_frames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ma_copy_pcm_frames(void *dst, const void *src, ma_uint64 frameCount, ma_format format, ma_uint32 channels)
     * }
     */
    public static MethodHandle ma_copy_pcm_frames$handle() {
        return ma_copy_pcm_frames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ma_copy_pcm_frames(void *dst, const void *src, ma_uint64 frameCount, ma_format format, ma_uint32 channels)
     * }
     */
    public static MemorySegment ma_copy_pcm_frames$address() {
        return ma_copy_pcm_frames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ma_copy_pcm_frames(void *dst, const void *src, ma_uint64 frameCount, ma_format format, ma_uint32 channels)
     * }
     */
    public static void ma_copy_pcm_frames(MemorySegment dst, MemorySegment src, long frameCount, int format, int channels) {
        var mh$ = ma_copy_pcm_frames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ma_copy_pcm_frames", dst, src, frameCount, format, channels);
            }
            mh$.invokeExact(dst, src, frameCount, format, channels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

